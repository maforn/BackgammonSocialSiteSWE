stages:
  - build
  - test
  - sonarqube-check
  - sonarqube-vulnerability-report

variables:
  # Paths for coverage and test directories
  COVERAGE_PATH: "coverage/server-coverage.xml"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"  # Ensures all branches are fetched

# Services for Docker-in-Docker (dind) and MongoDB
services:
  - name: docker:dind
    alias: docker

before_script:
  # Install Docker CLI, Bash, and Curl
  - apk add --no-cache docker-cli bash curl
  # Install Docker Compose
  - LATEST_COMPOSE=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
  - curl -L "https://github.com/docker/compose/releases/download/$LATEST_COMPOSE/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose  # Make Docker Compose executable
  - docker info  # Check if Docker daemon is running
  - docker-compose --version  # Verify Docker Compose installation

build:
  stage: build
  variables:
    SECURE_FILES_DOWNLOAD_PATH: './server/'
  script:
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - docker-compose -f docker-compose.yml build --parallel
    - docker-compose up mongodb -d

# Test stage - runs both Python and JavaScript tests without Docker
test:
  stage: test
  image: python:3.9  # Using Python 3.9 as base image for this stage
  services:
    - docker:dind # MongoDB service for testing
  before_script:
    # Set up Python environment
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r server/requirements.txt  # Install Python dependencies
    - pip install pytest pytest-cov  # Install test dependencies with coverage

    # Set up Node.js environment for frontend tests
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    - source ~/.nvm/nvm.sh
    - nvm install 18  # Install Node.js via NVM
    - nvm use 18
    - npm install --prefix client  # Install Node.js dependencies in the client directory
    - npm install -g vitest  # Install Vitest globally for frontend testing

  script:
    # Run Python tests with coverage
    - pytest --cov=server --cov-report=xml:$COVERAGE_PATH server/tests

    # Run frontend tests with Vitest, generating coverage report
    - npm run test:coverage --prefix client  # Ensure "test:coverage" is set in package.json for vitest

  artifacts:
    paths:
      - coverage/  # Store all coverage reports in the coverage folder
    expire_in: 1 hour

# SonarQube analysis stage
sonarqube-check:
  stage: sonarqube-check
  image: sonarsource/sonar-scanner-cli:5.0
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.projectKey=SWE-team-3-backgammon-social-site -Dsonar.qualitygate.wait=true -Dsonar.tests=server/tests,client/src/components/__tests__ -Dsonar.python.coverage.reportPaths=$COVERAGE_PATH
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop

# Vulnerability report stage
sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=SWE-team-3-backgammon-social-site&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
  dependencies:
    - sonarqube-check
